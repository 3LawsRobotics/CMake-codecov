# include required Modules
include(FindPackageHandleStandardArgs)


# Search for required lcov binaries.
find_program(LCOV_BIN lcov)
find_program(GENINFO_BIN geninfo)
find_program(GENHTML_BIN genhtml)
find_package_handle_standard_args(lcov
	REQUIRED_VARS LCOV_BIN GENINFO_BIN GENHTML_BIN
)


# If Lcov was not found, exit module now.
if (NOT LCOV_FOUND)
	return()
endif (NOT LCOV_FOUND)



# Add a new global target to generate target .info files for all targets. This
# target could be used to generate the .tgt.info files for the whole project
# instead of calling <TARGET>-geninfo for each target.
if (NOT TARGET lcov-geninfo)
	add_custom_target(lcov-geninfo)
endif (NOT TARGET lcov-geninfo)

# Add a new global target to generate the lcov html report for the whole project
# instead of calling <TARGET>-genhtml for each target (to create an own report
# for each target). Instead of the lcov target it does not require geninfo for
# all targets, so you have to call <TARGET>-geninfo to generate the info files
# the targets you'd like to have in your report or lcov-geninfo for generating
# info files for all targets before calling lcov-genhtml.
if (NOT TARGET lcov-genhtml)
	add_custom_target(lcov-genhtml
		WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
		COMMAND ${GENHTML_BIN}
			-q
			-t ${CMAKE_PROJECT_NAME}
			-o ${CMAKE_BINARY_DIR}/lcov/project
			`find . -name \"*.tgt.info\"`
	)
endif (NOT TARGET lcov-genhtml)

# Add a new global target for all lcov targets. This target could be used to
# generate the lcov html output for the whole project instead of calling
# <TARGET>-geninfo and <TARGET>-genhtml for each target. It will also be used to
# generate a html site for all project data together instead of one for each
# target.
if (NOT TARGET lcov)
	add_custom_target(lcov
		WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
		COMMAND ${GENHTML_BIN}
			-q
			-t ${CMAKE_PROJECT_NAME}
			-o ${CMAKE_BINARY_DIR}/lcov/project
			`find . -name \"*.tgt.info\"`
		DEPENDS lcov-geninfo
	)
endif ()



# This function will add lcov evaluation for target <TNAME>. Only sources of
# this target will be evaluated and no dependencies will be added. It will call
# geninfo on any source file of <TNAME> once and store the info file in the same
#directory.
function (add_lcov_target TARGET)
	set(TDIR ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${TNAME}.dir)

	get_target_property(TSOURCES ${TNAME} SOURCES)
	set(GENINFO_FILES "")
	set(LCOV_ARGS "")
	foreach(FILE ${TSOURCES})
		get_filename_component(FILE_PATH "${TDIR}/${FILE}" PATH)

		# call geninfo
		add_custom_command(OUTPUT ${TDIR}/${FILE}.gcda.info
			COMMAND ${GENINFO_BIN} ${TDIR}/${FILE}.gcda > /dev/null
			DEPENDS ${TNAME} ${TDIR}/${FILE}.gcda
			WORKING_DIRECTORY ${FILE_PATH}
		)

		list(APPEND GENINFO_FILES ${TDIR}/${FILE}.gcda.info)
		list(APPEND LCOV_ARGS -a ${TDIR}/${FILE}.gcda.info)
	endforeach()

	# concatenate all files generated by geninfo to a single file per target
	add_custom_command(OUTPUT ${TDIR}/${TNAME}.tgt.info
		COMMAND ${LCOV_BIN}
			${LCOV_ARGS} -o ${TDIR}/${TNAME}.tgt.info
			> /dev/null
		DEPENDS ${GENINFO_FILES}
	)

	# add target for geninfo file for <TNAME>
	add_custom_target(${TNAME}-geninfo DEPENDS ${TDIR}/${TNAME}.tgt.info)

	# add geninfo file generation to global lcov-geninfo target
	add_dependencies(lcov-geninfo ${TNAME}-geninfo)


	# add target for generating html output for this target only. Output of
	# genhtml will be stored in own HTML directory lcov/<TNAME> in
	# CMAKE_BINARY_DIR.
	add_custom_target(${TNAME}-genhtml
		WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
		COMMAND ${GENHTML_BIN}
			-t ${CMAKE_PROJECT_NAME}
			-o ${CMAKE_BINARY_DIR}/lcov/${TNAME}
			${TDIR}/${TNAME}.tgt.info
			> /dev/null
		DEPENDS ${TNAME}-geninfo
	)
endfunction (add_lcov_target)
